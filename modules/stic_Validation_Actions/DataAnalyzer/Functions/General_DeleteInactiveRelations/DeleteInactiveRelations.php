<?php

/**
 * Find and delete relationships where any of the related records no longer exists or has been deleted.
 * Find and delete the value of related fields where the ID that stores the related field points to a record that no longer exists or has been deleted.
 * Find and remove the value of parent_id and parent_type in those Related To fields where the ID that stores the related field points to a record that no longer exists or has been deleted.
 * 
 * The following methods are implemented for this:
 * - $this->deleteInactiveRelationsWithoutParentId();
 * - $this->deleteInactiveParentIdFields();
 * - $this->deleteInactiveRelateFields();
 */
class DeleteInactiveRelations extends DataCheckFunction {

    // DBManager object used to perform the query
    protected $db;

    // Array where to store the name of the fields already checked
    protected $checkedFields = array();

    /**
     * Set the relationship as deleted or delete the related field for outdated relationships
     */
    public function doAction($dbResult, $actionBean) 
    {
        $this->db = DBManagerFactory::getInstance();

        /* 
        The calling order to the following methods is important since some fields generated by relations 
        could be managed by the deleteInactiveRelateFields() function if it were called before, generating an error.
        Order:
        - 1st: deleteInactiveRelationshipsWithoutParentId()
        - 2nd: deleteInactiveParentIdFields()
        - 3rd: deleteInactiveRelateFields() 
        */
        $this->deleteInactiveRelationshipsWithoutParentId();
        $this->deleteInactiveParentIdFields();
        $this->deleteInactiveRelateFields();

        return true;
    }

    /**
     * Process standard relationships and mark as deleted those that are outdated.
     */   
    protected function deleteInactiveRelationshipsWithoutParentId()
    {
        // Select relationships that do not have parent_id
        $query = "SELECT relationship_name, join_table, join_key_lhs, join_key_rhs, lhs_table, lhs_key, rhs_table, rhs_key, relationship_type 
                  FROM relationships 
                  WHERE `lhs_key`!='parent_id' AND `rhs_key`!='parent_id' AND relationship_type in ('many-to-many','one-to-many','one-to-one') 
                  ORDER BY relationship_type, relationship_name ASC";
        $result = $this->db->query($query);

        while ($relation = $this->db->fetchByAssoc($result, false)) 
        {
            // Case 1: relationships that have join_table
            if ($relation['join_table'])
            {
                // If any of the IDs in the relationship does not exist, the relationship record is set as deleted. 
                $queryUpdate = "UPDATE {$relation['join_table']} SET deleted = 1
                WHERE deleted = 0 
                AND 
                ( 
                    ({$relation['join_key_lhs']} NOT IN (SELECT id FROM {$relation['lhs_table']} WHERE deleted = 0)) 
                    OR 
                    ({$relation['join_key_rhs']} NOT IN (SELECT id FROM {$relation['rhs_table']} WHERE deleted = 0)) 
                );";
                
                $resultUpdate = $this->db->query($queryUpdate);
                $affectedRows = $this->db->getAffectedRowCount($resultUpdate);

            } else { // Case 2: Special related fields like assigned_user_id, created_by or modified_user_by
                
                // If in a field we store an ID that does not exist, the value of that field is deleted.
                if ($relation['relationship_type'] == 'one-to-many' || $relation['relationship_type'] == 'one-to-one') 
                { 
                    if ($relation['lhs_key'] != 'id') {
                        $updateTable = $relation['lhs_table'];
                        $updateField = $relation['lhs_key'];
                        $mainTable = $relation['rhs_table'];
                    } else {
                        $updateTable = $relation['rhs_table'];
                        $updateField = $relation['rhs_key'];
                        $mainTable = $relation['lhs_table'];
                    }

                    $queryUpdate = "UPDATE {$updateTable} as a SET a.{$updateField} = NULL 
                    WHERE a.{$updateField} != '' AND a.{$updateField} NOT IN (SELECT b.id FROM (SELECT * FROM {$mainTable}) as b WHERE b.deleted = 0);";

                    $resultUpdate = $this->db->query($queryUpdate);
                    $affectedRows = $this->db->getAffectedRowCount($resultUpdate);

                    // Add the field to checked fields array
                    $this->checkedFields[] = $updateTable . $updateField;
                }
            }

            // Report the results
            $this->report($queryUpdate, $resultUpdate, $affectedRows, $relation['relationship_name'], $relation['join_table'], null);
        }
    }

    /**
     * Process parent_id relations and fields and delete the outdated relate ID
     */   
    protected function deleteInactiveParentIdFields()
    {
        // SuiteCRM special relationships with parent_id in lhs_key
        $query = "SELECT relationship_name, lhs_table FROM relationships WHERE lhs_key = 'parent_id' GROUP BY lhs_table ORDER BY lhs_table ASC";
        $result = $this->db->query($query);
        while ($relation = $this->db->fetchByAssoc($result, false)) {
            $updateTable = strtolower($relation['lhs_table']);
            $this->updateParentIdFields($relation['relationship_name'], $updateTable);
        }

        // SuiteCRM special relationships with parent_id in rhs_key
        $query = "SELECT relationship_name, rhs_table FROM relationships WHERE rhs_key = 'parent_id' GROUP BY rhs_table ORDER BY rhs_table ASC";
        $result = $this->db->query($query);
        while ($relation = $this->db->fetchByAssoc($result, false)) {
            $updateTable = strtolower($relation['rhs_table']);
            $this->updateParentIdFields($relation['relationship_name'], $updateTable);
        }

        // Flex Relate Fields
        $query = "SELECT custom_module FROM `fields_meta_data` WHERE name = 'parent_id' GROUP BY custom_module ORDER BY custom_module ASC";
        $result = $this->db->query($query);
        while ($module = $this->db->fetchByAssoc($result, false)['custom_module']) {
            $bean = BeanFactory::getBean($module);
            $updateTable = $bean->get_custom_table_name();
            $this->updateParentIdFields($module, $updateTable);
        }
        
        // Add the field to checked fields array
        $this->checkedFields[] = $updateTable . 'parent_id';
    }
    
    /**
     * Delete the relate ID of the parent field if it is outdated or non-existent 
     */  
    private function updateParentIdFields($relation, $updateTable)
    {
        $affectedRows = 0;
        $query = "SELECT parent_type FROM {$updateTable} WHERE parent_id != '' AND parent_id IS NOT NULL";        
        $results = $this->db->query($query);

        if ($results->num_rows !== 0) 
        {
            if ($results !== false) 
            {
                $record = $this->db->fetchByAssoc($results, false);
                $bean = BeanFactory::newBean($record["parent_type"]);
                $queryUpdate = "UPDATE {$updateTable} as a SET a.parent_id = NULL, a.parent_type = NULL 
                WHERE a.parent_id != '' AND a.parent_id NOT IN (SELECT b.id FROM (SELECT * FROM {$bean->table_name}) as b WHERE b.deleted = 0);";
                $resultUpdate = $this->db->query($queryUpdate);
                $affectedRows = $affectedRows + $this->db->getAffectedRowCount($resultUpdate);
                
                // Report the results
                $this->report($queryUpdate, $resultUpdate, $affectedRows, $relation, $updateTable, 'parent_id');
            } 
            else 
            { 
                // When a module is related to itself the relationship does not have a parent_type field (example: member_accounts)
                $query = "SELECT id FROM " . $updateTable . " WHERE parent_id != '' AND parent_id IS NOT NULL" ;
                $results = $this->db->query($query);
                if (($results !== false && $results->num_rows > 0)){
                    $record = $this->db->fetchByAssoc($results, false);
                    $queryUpdate = "UPDATE {$updateTable} as a SET a.parent_id = NULL 
                    WHERE a.parent_id != '' AND a.parent_id NOT IN (SELECT b.id FROM (SELECT * FROM {$updateTable}) as b WHERE b.deleted = 0);";
                    $resultUpdate = $this->db->query($queryUpdate);
                    $affectedRows = $affectedRows + $this->db->getAffectedRowCount($resultUpdate);  
                    
                    // Report the results
                    $this->report($queryUpdate, $resultUpdate, $affectedRows, $relation, $updateTable, 'parent_id and parent_type');
                }
            }
        }
    }

    /**
     * Select relate fields (fields thah finish with _id_c) and delete the relate ID if this is inactive or non-existent 
     */   
    protected function deleteInactiveRelateFields()
    {       
        // List of modules where to find inactive relate fields
        $moduleList = $GLOBALS['moduleList'];

        // Get the related fields of the each module
        foreach($moduleList as $moduleName) 
        {
            if ($bean = BeanFactory::getBean($moduleName))
            {
                $updateTable = $bean->getTableName();
                $related_fields = $bean->get_related_fields();
                
                foreach($related_fields as $field) 
                {
                    if ($field['id_name'] && // Filter name and link fields created by a relationship
                        !in_array($field['id_name'], $this->checkedFields) &&  // Filter id fields created by a 1-N or 1-1 relationship
                        !$field['table']) // Filter id fields created by an N-M relationship
                    {
                        if ($field['custom_module']){
                            $updateTable = $bean->get_custom_table_name();
                        }

                        $updateField = $field['id_name'];
                        $bean_custom = BeanFactory::getBean($field['module']);
                        $mainTable = $bean_custom->getTableName();
    
                        $queryUpdate = "UPDATE {$updateTable} as a SET a.{$updateField} = NULL 
                        WHERE a.{$updateField} != '' AND a.{$updateField} NOT IN (SELECT b.id FROM (SELECT * FROM {$mainTable}) as b WHERE b.deleted = 0);";

                        $resultUpdate = $this->db->query($queryUpdate);
                        $affectedRows = $this->db->getAffectedRowCount($resultUpdate);
    
                        // Add the field to checked fields array
                        $this->checkedFields[] = $updateTable . $updateField;
    
                        // Report the results
                        $this->report($queryUpdate, $resultUpdate, $affectedRows, null, $updateTable, $updateField, $updateField);
                    }
                }
            }
        }   
    }

    /**
     * Report the executed queries and their results 
     * @param String $queryUpdate Executed query
     * @param String $resultUpdate Result of the query
     * @param String $affectedRows Rows affected by the query
     * @param String $updateTable Checkered table
     * @param String $updateField Checkered field 
     */   
    function report($queryUpdate, $resultUpdate, $affectedRows, $relationship, $updateTable, $updateField) 
    {
        if($resultUpdate){
            if ($affectedRows > 0) {
                $GLOBALS['log']->error('Line ' . __LINE__ . ': ' . __METHOD__ . ': Deleted outdated records: ');                                
                $GLOBALS['log']->error('- Relationship:' . $relationship);                                
                $GLOBALS['log']->error('- ' . $affectedRows . ' records have been updated in the table ' . $updateTable);                
                $GLOBALS['log']->error('- Executed query: ' . $queryUpdate); 
            }
        } else {
            if($updateField){
                $GLOBALS['log']->info('Line ' . __LINE__ . ': ' . __METHOD__ . ': Error updating the ' . $updateField . ' field in the table: ' . $updateTable);                
            } else {
                $GLOBALS['log']->info('Line ' . __LINE__ . ': ' . __METHOD__ . ': Error updating the relationship ' . $relationship);                
            }             
        }
    }
}
